node {
    script {
        mysql_addr = '127.0.0.1' // service cluster ip
        redis_addr = '127.0.0.1' // service cluster ip
        user_addr = '127.0.0.1:30036' // nodeIp : port
    }

    // 使用 Jenkinsfile 会关联 Git 仓库，代码已经一起拉下来
    stage('get commit_id from github') {
        echo "first stage: get commit_id"
        script {
            commit_id = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
        }
    }


    stage('build image') {
        echo "second stage: build docker image"
        sh "docker build -t aoho/user:${commit_id} section11/user/"
    }


    stage('push image') {
        echo "third stage: push docker image to registry"
        sh "docker login -u aoho -p xxxxxx"
        sh "docker push aoho/user:${commit_id}"
    }

    stage('deploy to Kubernetes') {
        echo "forth stage: deploy to Kubernetes"
        sh "sed -i 's/<COMMIT_ID_TAG>/${commit_id}/' user-service.yaml"
        sh "sed -i 's/<MYSQL_ADDR_TAG>/${mysql_addr}/' user-service.yaml"
        sh "sed -i 's/<REDIS_ADDR_TAG>/${redis_addr}/' user-service.yaml"
        sh "kubectl apply -f user.yaml"
    }


    stage('http test') {
        echo "fifth stage: http test"
        sh "cd section11/user/transport && go test  -args ${user_addr}"
    }

}

//个人总结二者的主要区别有两点：
//1. 脚本式pipeline只支持stage，像stages 、steps更细致的阶段划分则不支持；
//2. 当我们需要在脚本中写复杂逻辑的时候，通过脚本式pipeline可以方便的编写脚本，例如需要加入循环的逻辑，使用脚本式pipeline，简单实现如下：

pipeline {
    agent any

    tools {
        maven 'apache-maven-3.0.1'
    }

    environment {
            CC = 'clang'
    }

    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
    }

    options {
        timestamps()
        ansiColor("xterm")
    }

    stages {
        stage("Build") {
            options {
                timeout(time: 1, unit: "MINUTES")
            }
            steps {
                sh 'printf "\\e[31mSome code compilation here...\\e[0m\\n"'
            }
        }

        stage("Test") {
            when {
                environment name: "FOO", value: "bar"
            }
            options {
                timeout(time: 2, unit: "MINUTES")
            }
            steps {
                sh 'printf "\\e[31mSome tests execution here...\\e[0m\\n"'
            }
        }
    }
}
